# -*- coding: utf-8 -*-
"""1hiveSourceCredGraphV4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UTeYsUZU4km8OrtqJ5QDlnlcZSIrdz2c
"""

import requests
import json 
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import datetime
import matplotlib.dates as mdates 
from tabulate import tabulate
import math
import plotly as py
import plotly.express as px

def truncate(number, decimals=0):
    """
    Returns a value truncated to a specific number of decimal places.
    """
    if not isinstance(decimals, int):
        raise TypeError("decimal places must be an integer.")
    elif decimals < 0:
        raise ValueError("decimal places has to be 0 or more.")
    elif decimals == 0:
        return math.trunc(number)

    factor = 10.0 ** decimals
    return math.trunc(number * factor) / factor

#----------------------------- Load output json --------------------------



url = 'https://raw.githubusercontent.com/1Hive/pollen/gh-pages/output/credResult.json'
r = requests.get(url)
cred = json.loads(r.text)

#with open('credResult.json', 'r') as f:
#  cred = json.load(f)

# -------------------------- Set dates time-filtering ------------------------

# start_date = '2018/11/10 18:56:36'
start_date = '2020/10/01 00:00:00'
end_date = '2020/10/18 00:00:00'


start_datetime = datetime.datetime.strptime(start_date, '%Y/%m/%d %H:%M:%S')
end_datetime = datetime.datetime.strptime(end_date, '%Y/%m/%d %H:%M:%S')

num_nodes = len(cred[1]['credData']['nodeSummaries']) 
nodes = []

for i in range(num_nodes):

	# if (cred[1]['weightedGraph'][1]['graphJSON'][1]['sortedNodeAddresses'][i][1] == 'discourse'): 
	node = {}
	node['address'] = cred[1]['weightedGraph'][1]['graphJSON'][1]['sortedNodeAddresses'][i]
	node['cred'] = cred[1]['credData']['nodeSummaries'][i]['cred']
	if cred[1]['credData']['nodeOverTime'][i] is None: 
		node ['credOverTime'] = []
	else:
		node ['credOverTime'] = cred[1]['credData']['nodeOverTime'][i]['cred']  

	node['description'] = cred[1]['weightedGraph'][1]['graphJSON'][1]['nodes'][i]['description'] 
	node['timestamp'] = cred[1]['weightedGraph'][1]['graphJSON'][1]['nodes'][i]['timestampMs'] 
	node['user'] = ''

	if (node['address'][2] == 'IDENTITY'):
		node['user'] = cred[1]['weightedGraph'][1]['graphJSON'][1]['nodes'][i]['description']
	
	nodes.append(node)

# --------- ----------------- filter nodes by type --------------------------


nodes_filt = [ node for node in nodes if (node['address'][2]== 'post') ]
# nodes_filt = [ node for node in cred[1]["orderedNodes"] if (node['address'][2] == 'topic' )] # Filter by topic
# nodes_filt = [ node for node in cred[1]["orderedNodes"] if (node['address'][2] == 'topic' or node['address'][2]== 'post') ] # Filter by topic AND post
# nodes_filt = cred[1]["orderedNodes"]  # No filter (pass through..)

# --------------------------- filter nodes by dateTime --------------------------

nodes_time_filt = [ node for node in nodes_filt if (datetime.datetime.fromtimestamp(node['timestamp']/1000 ) >= \
		start_datetime and datetime.datetime.fromtimestamp(node['timestamp']/1000 ) <= end_datetime) ]

# ------------------------- Plot top users Cred over time --------------------

# filter user nodes 
nodes_filt = [ node for node in nodes if (node['address'][2] == 'IDENTITY') ]
span = 8	
num_display = 100


nodes_sorted5 = sorted(nodes_filt, key=lambda e: sum(e['credOverTime'][-span:-1]), reverse=True)

top_nodes = nodes_sorted5[:num_display]
new_list = [i['endTimeMs'] for i in cred[1]['credData']['intervals']]



intervals = new_list[-span:-1]

EndDateTime = []						# Get datetime of intervals (end)
for i in range(len(intervals)):
	EndDateTime.append(datetime.datetime.fromtimestamp(intervals[i]/1000 )) 

for i in range(num_display):

	# plt.plot(EndDateTime,top_nodes[i]['credOverTime'][-span:], label=top_nodes[i]['address'][4])
	plt.plot(EndDateTime,top_nodes[i]['credOverTime'][-span:-1], label=top_nodes[i]['description'])



fig_size = plt.rcParams["figure.figsize"]
fig_size[0] = 16
fig_size[1] = 8
plt.rcParams["figure.figsize"] = fig_size


plt.xlabel('date')
plt.ylabel('Cred')
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d/%Y'))

plt.show()

# ------------------------- Create pandas dataframe --------------------



df2 = pd.DataFrame(top_nodes,columns=['user', 'cred', 'credOverTime'])

df3 = pd.DataFrame(df2.credOverTime.tolist(), index= df2.index)
df4 = pd.concat([df2['user'],df2['cred'], df3], axis=1, sort=False)

# add extra colum with user name for sorting
df4['User.Upper'] = df4['user'].str.upper()
df4.sort_values(by='User.Upper', inplace=True)
df4.to_csv(r'dataframe5.csv', index = False)

df4

# ------------------------- Plot sorted by username --------------------

fig = px.bar(df4, x="user", y="cred", title='Cumulated Cred Balance - Sorted Alphabetically',width=1800, height=800)
fig.update_xaxes(tickangle=45, tickfont=dict(family='Rockwell', size=12))
fig.show()

df4.sort_values(by='cred', inplace=True, ascending=False)
fig = px.bar(df4, x="user", y="cred", title='Cumulated Cred Balance - Sorted by Cred',width=1800, height=800)
fig.update_xaxes(tickangle=45, tickfont=dict(family='Rockwell', size=12))
fig.show()